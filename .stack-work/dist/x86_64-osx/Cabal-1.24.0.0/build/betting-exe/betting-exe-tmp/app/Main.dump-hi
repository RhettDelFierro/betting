
==================== FINAL INTERFACE ====================
2017-02-01 00:58:50.745147 UTC

interface main@main:Main [orphan module] 8001
  interface hash: 10a30a0362fa3882b9da712978662d2d
  ABI hash: ae98a151ee3b111b4bc0c88c795a73bc
  export-list hash: 0b5b77de2e80575b536d3dee048d2f50
  orphan hash: f9758bca3c0c66269877299a4ebc5b86
  flag hash: 5688540879a7f6bf6c99fd7bb39c8ad1
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.checkDates
  Main.checkFullPage
  Main.checkInterval
  Main.effectiveFieldGoalPct
  Main.frequency
  Main.gameDayInterval
  Main.getBoxScores
  Main.getGamesByTeam
  Main.getJSON
  Main.initTeam
  Main.main
  Main.recordThroughDays
  Main.removeOvertime
  Main.replaceTeamName
  Main.showResult
  Main.splitHomeAwayTeams
  Main.splitWinLossTeams
  Main.stretchResults
  Main.sumInts
  Main.sumPct
  Main.teamURLS
  Main.FullPage{Main.FullPage resultSets}
  Main.ResultSets{Main.ResultSets rowSet}
module dependencies: Types
package dependencies: aeson-0.11.2.1@aeson-0.11.2.1-AE1BV6NZdP1FqsW2xALCUS
                      array-0.5.1.1@array-0.5.1.1
                      asn1-encoding-0.9.4@asn1-encoding-0.9.4-2Zu5ldLYD571Aw26w0CWF6
                      asn1-parse-0.9.4@asn1-parse-0.9.4-Ai83ACtrOir9VlSOQtWm2F
                      asn1-types-0.3.2@asn1-types-0.3.2-4Rz223aP8OG6vnHYiLX5Ab
                      async-2.1.1@async-2.1.1-xFiBzw9xoB8HPZAuxUY2o
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-2AyzLuPV4T95RcYDl03Ghe
                      base-4.9.0.0
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-In9M41tLtcS9QYt3QpGpNY
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-6Lw6V3wDhf3KDMasjNOEeG
                      byteable-0.1.1@byteable-0.1.1-15aIBCArSOBEnGxArzrDTM
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.7@case-insensitive-1.2.0.7-FDS9muZSKvyFFsDxjwuYX9
                      cereal-0.5.4.0@cereal-0.5.4.0-2FJYHGgtE5C3SxaZjt25xS
                      conduit-1.2.8@conduit-1.2.8-5fgvzhyiRP8I8gw0elzssW
                      connection-0.2.6@connection-0.2.6-HdqI1haOFiwKHVrIKjItoA
                      containers-0.5.7.1@containers-0.5.7.1
                      cookie-0.4.2.1@cookie-0.4.2.1-5P6dolSQSje7mJQ7M5DM5i
                      cryptonite-0.19@cryptonite-0.19-G9PYO4oOEqhDTta2u9rAaU
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-FYQpjIylblBDctdkHAFeXA
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.2.6.2@directory-1.2.6.2
                      dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      filepath-1.4.1.0@filepath-1.4.1.0
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-Ctl752zbguF6QanxurLOm2
                      hourglass-0.2.10@hourglass-0.2.10-I8h0J4RSF89FN6CuD9x2Xx
                      http-client-0.4.31.2@http-client-0.4.31.2-CTnfNOBjDfGBLnvRmIntNQ
                      http-client-tls-0.2.4.1@http-client-tls-0.2.4.1-2pqEnnSxwBj2EbL6R6YsJU
                      http-conduit-2.1.11@http-conduit-2.1.11-EC4vL4GcRJtDqKzYoSe7M2
                      http-types-0.9.1@http-types-0.9.1-BTSIP6lzG5DE6u136Payws
                      integer-gmp-1.0.0.1
                      lifted-base-0.2.3.8@lifted-base-0.2.3.8-KLkd0w1UJqu6nE8oVTTEBy
                      memory-0.13@memory-0.13-ABHR5331zHK9scHPRr7afU
                      mmorph-1.0.9@mmorph-1.0.9-DmSwQqk5nLj7roLAcydGz
                      monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
                      network-uri-2.6.1.0@network-uri-2.6.1.0-6PuDgH21OiwGLI4QZ1g9kt
                      parsec-3.1.11@parsec-3.1.11-37j7M1YEHqtEooY7BpJdri
                      pem-0.2.2@pem-0.2.2-qPMQP6sZm3HgQEmiBojNt
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      process-1.4.2.0@process-1.4.2.0
                      resourcet-1.1.9@resourcet-1.1.9-965WSCM4zVm5AReELsOl9B
                      scientific-0.3.4.9@scientific-0.3.4.9-ENrtAw13zTS8y4klTK3l4D
                      socks-0.5.5@socks-0.5.5-GieRokcgjQCIzUyRn9wVby
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      streaming-commons-0.1.16@streaming-commons-0.1.16-3F5ilGqdpiI2CBV4Mk7gyK
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs
                      time-1.6.0.1@time-1.6.0.1
                      tls-1.3.8@tls-1.3.8-5FNpX1ar5fUDvPXr9oTBwU
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-25SoAegOdaF8rLEnnb5jPI
                      unix-2.7.2.0@unix-2.7.2.0
                      unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-9ObqN3agNul2CNhSIO1Z6T
                      vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3
                      x509-1.6.5@x509-1.6.5-HjCowFpmcM8HnxtXMnFeKC
                      x509-store-1.6.2@x509-store-1.6.2-7384mRFE6N95dT3g57GZ4k
                      x509-system-1.6.4@x509-system-1.6.4-GZ2eHV03TV52Kz7CzPq5ks
                      x509-validation-1.6.5@x509-validation-1.6.5-CWrkfsWQ7JuF1tW2ozdqZN
                      zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV
orphans: aeson-0.11.2.1@aeson-0.11.2.1-AE1BV6NZdP1FqsW2xALCUS:Data.Aeson.Types.Generic
         aeson-0.11.2.1@aeson-0.11.2.1-AE1BV6NZdP1FqsW2xALCUS:Data.Aeson.Types.Instances
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-2AyzLuPV4T95RcYDl03Ghe:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-2AyzLuPV4T95RcYDl03Ghe:Data.Attoparsec.Text.Internal
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-Ctl752zbguF6QanxurLOm2:Data.Hashable.Generic
         http-client-0.4.31.2@http-client-0.4.31.2-CTnfNOBjDfGBLnvRmIntNQ:Network.HTTP.Client.Request
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-2AyzLuPV4T95RcYDl03Ghe:Data.Attoparsec.Internal.Types
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv:Data.DList
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         http-client-0.4.31.2@http-client-0.4.31.2-CTnfNOBjDfGBLnvRmIntNQ:Network.HTTP.Client
                         monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT:Control.Monad.Trans.Control
                         network-uri-2.6.1.0@network-uri-2.6.1.0-6PuDgH21OiwGLI4QZ1g9kt:Network.URI
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         resourcet-1.1.9@resourcet-1.1.9-965WSCM4zVm5AReELsOl9B:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text
                         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Lazy
                         unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-9ObqN3agNul2CNhSIO1Z6T:Data.HashMap.Base
                         unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-9ObqN3agNul2CNhSIO1Z6T:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV:Codec.Compression.Zlib.Stream
import  -/  aeson-0.11.2.1@aeson-0.11.2.1-AE1BV6NZdP1FqsW2xALCUS:Data.Aeson 07faf4656b0b930e13399d4890dda818
import  -/  aeson-0.11.2.1@aeson-0.11.2.1-AE1BV6NZdP1FqsW2xALCUS:Data.Aeson.Types 147966832ebae3b30df8f20c63c643d1
import  -/  aeson-0.11.2.1@aeson-0.11.2.1-AE1BV6NZdP1FqsW2xALCUS:Data.Aeson.Types.Class ba16b480b81e9d38e1731ffeabd0fe31
import  -/  aeson-0.11.2.1@aeson-0.11.2.1-AE1BV6NZdP1FqsW2xALCUS:Data.Aeson.Types.Instances 99f124f9ba16af0c6ccd31a973ddeda4
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Function 0e2e66c2e87e48a960f18fa702dab405
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Traversable 7ce5b7ee67475ac3d03ae825b86efd9f
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:Debug.Trace ea8cb00328fe92825c831d5e7694bf0a
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Read 817c914615ac8e308afc0c675fb3f671
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  base-4.9.0.0:Text.ParserCombinators.ReadPrec 9512e2f4b227f507f87a150887202aed
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  base-4.9.0.0:Text.Read.Lex fe3dd7b823826bf6870140c5363f9596
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy a6af578022042da0a57ba0b919bc6c78
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy.Char8 22406b4bf44ab096084a9ba406db8a02
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy.Internal f0df474bf1747957504b03d816c8df3d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 8f3eaf1368a7ea27857993e3febae6a3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8d095ad71634b5551ba5dc1307b7f9e5
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  http-conduit-2.1.11@http-conduit-2.1.11-EC4vL4GcRJtDqKzYoSe7M2:Network.HTTP.Conduit 20e8a617303d82477b111e8b9bf2d77a
import  -/  Types 98a7a616ff8f2acd0eefb0d3c0e5168b
  exports: 83219fabebf386f01ef10be815bedda3
  AwayTeamGameResult 63a7289379457ddc39464243f56f7993
  DayDiff bb35b49f74cc1d810e139ef880e8ee92
  GameDate 3b93c766a88f70c74b0a10d2bd2f31dd
  GameResult bf52aa663776b7acda5a60beef9fb825
  GameResult 9965cd3fb4a9830c83bfa78bfc630eec
  Game_ID 769e699cb65a09f0892704ef7fb906ef
  HomeTeamGameResult 2b15f5c7314c632a03df9bf5219fd9b7
  LosingTeamGameResult 8ee909b95dc66c41c686b701b2d0c49a
  Losses 2641e74f9c451fe55cd2dd05dfe3914a
  NumGamesPlayed 51ff151c748568059e3807ac8fec55d9
  TeamName 1d549ac4b892a72864d11837bddeba7f
  Team_ID 2a1f548bd3c14a73a5ad22224027dae8
  Teams b0e0b359a3fe649a806f6b9dc72a9392
  WinningTeamGameResult facac5ba4eb6456a0fe1f9a4026a6cee
  Wins fb6a1ed813d13544ccc8c2cd681eb41e
  assists 19d507dbc3359d31318a34aac4475067
  ast 50c1c64dafb2f7351d2cbe6a49d262a9
  b2b c1159f129501f69627e10a019450e823
  blk fdec46f6af8e995460ff214b588a439d
  blocks 81183c2a5416e95d5d104b7082b94fb7
  dreb 33302277175b9c131157c44872218c09
  eFGPct 83955cee4d660d79960e1e7ef3efb63a
  fg3_pct 264e4239678b5d67d76431fdf49ac8f3
  fg3a 7fe053eabfef88d9be1ffcdec641613f
  fg3m 0c1c3b0ee6168c8261a10520b6a44a8a
  fg_pct 92494e406eb184504d0d9c810256309b
  fga ad86ebcd6c40c29b3364be9f0245af0b
  fgm 1ffbb3ec894ccfcbfe417a6564acc5ae
  fieldGoalPct 23447c22cf71e43e5fd10bce3d6e3900
  fourInSix 74a436c313df920acd0698db757cf6c7
  freeTAtt 4c8df88f2b59d35d8fc5f373db22e4a3
  freeTMade ae348f1fb9c49b575cf734df8299c842
  ft_pct a076cf44ae960cd8642f221ac5b434da
  fta 163e8a9c9b7d0e6654fd0fadc31ba851
  ftm 5afec20dfffe80124210727bc3908cbc
  game_ID 77e36dd5b6631a9e23fb9ed3f92a1135
  game_date ce36ad5a9d0ab2dcfe0daf0da17fe46b
  home 5c900c27b00c6922bd30840dd38cc034
  lo 1705268aea44ebf7a833786527f811da
  matchup 1ab3dfd7366f9e9bc96c5f6dfc9cb69e
  minutes e806c9482b00cf85d4bc84ee0b1c3f9d
  offReb 65306e9262c08e457a975c04be0e0fd4
  oreb 9ddd6e4cb34893370515ccda05f7dcc5
  pf 30ea71a5259db77e290a1f9cad57fe62
  pointDiff b4f1ef8b72a0b33cacea69e2f72a8f1c
  pts b2f98c69c073826a21b9459fd8434c49
  reb fe402a131d88b48fb06cce41cd1d319f
  rebounds 9029dc31176dbb36d24fff6f82e2024b
  steals a9e6cfd39f47e6bf6d3fd6a745166f42
  stl 8faf6bc4eb5318a8fbd5de99ad1e5800
  team_ID 4ea965d34b57ba44bbff8fdf849b24e0
  teams 1519a97f1d5dc903076e4d698a7df16d
  threeFGA df59dff5d583e53da5a1b3b4a5360968
  threeFGM c18710bfa1f2e8d570d4e8c19c7bd1e0
  threeInFour 14584a513cb260065424e0d210c87c79
  tov a2af1bce4b220f68160638c1ffed7ff4
  turnovers 72b53591c218aafcb80b1ce4f24c6671
  w_pct 82713c83d86437b89e04b27896cb64a0
  wi 3323daa646864c7adf7ae17993954de1
  winningTeamDefault 10e598335b6b2c54323cabb3a6012120
  wl 183a1af88f149d9f5d2a27d59555e69f
import  -/  text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text 1e73069de2859bae8530c14767b0c6af
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time 780e2aecb1fb9ccddcc7e0dc4518a593
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar 44843125e625ba0c33d003b4a74e290d
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Days 78fb08170477ff7a05d07a106538d707
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock 123f4f3108b813affbe0d12c8a29799f
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Format 27cb95f964a30cb92bacdbe49c3edd92
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Locale c145edcf6f9ed5eb13f88f2adc21a4ef
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse 104244d33e67a9ff260ef78e1b23f17f
3528369baec837ab39a45b2f834e9b4e
  $fEqFullPage :: GHC.Classes.Eq Main.FullPage
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.FullPage Main.$fEqFullPage_$c== Main.$fEqFullPage_$c/= -}
3528369baec837ab39a45b2f834e9b4e
  $fEqFullPage_$c/= ::
    Main.FullPage -> Main.FullPage -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.FullPage) (b :: Main.FullPage) ->
                 case a of wild { Main.FullPage a3 ->
                 case b of wild1 { Main.FullPage b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Main.ResultSets
                        Main.$fEqResultSets
                        a3
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
3528369baec837ab39a45b2f834e9b4e
  $fEqFullPage_$c== ::
    Main.FullPage -> Main.FullPage -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.FullPage) (ds1 :: Main.FullPage) ->
                 case ds of wild { Main.FullPage a3 ->
                 case ds1 of wild1 { Main.FullPage b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ Main.ResultSets
                   Main.$fEqResultSets
                   a3
                   b1 } }) -}
29ee23d68ab60448765dff93b71530bc
  $fEqResultSets :: GHC.Classes.Eq Main.ResultSets
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.ResultSets
                  Main.$fEqResultSets_$c==
                  Main.$fEqResultSets_$c/= -}
29ee23d68ab60448765dff93b71530bc
  $fEqResultSets_$c/= ::
    Main.ResultSets -> Main.ResultSets -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.ResultSets) (b :: Main.ResultSets) ->
                 case a of wild { Main.ResultSets a3 ->
                 case b of wild1 { Main.ResultSets b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Types.GameResult
                        Types.$fEqGameResult
                        a3
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
29ee23d68ab60448765dff93b71530bc
  $fEqResultSets_$c== ::
    Main.ResultSets -> Main.ResultSets -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.ResultSets) (ds1 :: Main.ResultSets) ->
                 case ds of wild { Main.ResultSets a3 ->
                 case ds1 of wild1 { Main.ResultSets b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ Types.GameResult
                   Types.$fEqGameResult
                   a3
                   b1 } }) -}
3528369baec837ab39a45b2f834e9b4e
  $fFromJSONFullPage :: Data.Aeson.Types.Class.FromJSON Main.FullPage
  DFunId
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromJSONFullPage_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.N:FromJSON[0] <Main.FullPage>_N)) -}
3528369baec837ab39a45b2f834e9b4e
  $fFromJSONFullPage1 ::
    Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser Main.FullPage
  {- Arity: 1, Strictness: <L,1*U> -}
38a94afd73bdb6a29c0ddf560771cac7
  $fFromJSONFullPage2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Result Sets"#) -}
3528369baec837ab39a45b2f834e9b4e
  $fFromJSONFullPage_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Main.FullPage
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.Instances.withObject
                   @ Main.FullPage
                   Main.$fFromJSONFullPage2
                   Main.$fFromJSONFullPage1) -}
c7f2c322fade92b66a760a223fa0c452
  $fFromJSONGameResult ::
    Data.Aeson.Types.Class.FromJSON Types.GameResult
  DFunId
  {- Arity: 1, Strictness: <L,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromJSONGameResult_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.N:FromJSON[0]
                          <Types.GameResult>_N)) -}
d1253369bef861684642401d47e6a128
  $fFromJSONGameResult_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Types.GameResult
  {- Arity: 1, Strictness: <L,1*U> -}
29ee23d68ab60448765dff93b71530bc
  $fFromJSONResultSets ::
    Data.Aeson.Types.Class.FromJSON Main.ResultSets
  DFunId
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromJSONResultSets_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.N:FromJSON[0] <Main.ResultSets>_N)) -}
29ee23d68ab60448765dff93b71530bc
  $fFromJSONResultSets1 ::
    Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser Main.ResultSets
  {- Arity: 1, Strictness: <L,1*U> -}
433b219fd3ff1e9122b6e41d6c13d78e
  $fFromJSONResultSets2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Row Sets"#) -}
29ee23d68ab60448765dff93b71530bc
  $fFromJSONResultSets_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Main.ResultSets
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.Instances.withObject
                   @ Main.ResultSets
                   Main.$fFromJSONResultSets2
                   Main.$fFromJSONResultSets1) -}
3528369baec837ab39a45b2f834e9b4e
  $fReadFullPage :: GHC.Read.Read Main.FullPage
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.FullPage
                  Main.$fReadFullPage_$creadsPrec
                  Main.$fReadFullPage_$creadList
                  Main.$fReadFullPage_$creadPrec
                  Main.$fReadFullPage_$creadListPrec -}
3528369baec837ab39a45b2f834e9b4e
  $fReadFullPage1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Main.FullPage] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Main.FullPage] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Main.FullPage
                   Main.$fReadFullPage2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.FullPage>_R))
                   @ b
                   eta1) -}
3528369baec837ab39a45b2f834e9b4e
  $fReadFullPage2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Main.FullPage
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Main.FullPage
                   Main.$fReadFullPage3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Main.FullPage>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Main.FullPage>_R)))) -}
3528369baec837ab39a45b2f834e9b4e
  $fReadFullPage3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Main.FullPage -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Main.FullPage -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$creadPrec ww1 @ b w1 }) -}
3528369baec837ab39a45b2f834e9b4e
  $fReadFullPage4 :: Text.ParserCombinators.ReadP.P [Main.FullPage]
  {- Unfolding: (GHC.Read.$wlist
                   @ Main.FullPage
                   Main.$fReadFullPage2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.FullPage>_R))
                   @ [Main.FullPage]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Main.FullPage])) -}
3528369baec837ab39a45b2f834e9b4e
  $fReadFullPage_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Main.FullPage]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Main.FullPage]
                   Main.$fReadFullPage4) -}
3528369baec837ab39a45b2f834e9b4e
  $fReadFullPage_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Main.FullPage]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadFullPage1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Main.FullPage]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Main.FullPage]>_R))) -}
3528369baec837ab39a45b2f834e9b4e
  $fReadFullPage_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Main.FullPage
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadFullPage2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Main.FullPage>_R)) -}
3528369baec837ab39a45b2f834e9b4e
  $fReadFullPage_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Main.FullPage
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Main.FullPage
                   ((GHC.Read.$fReadDouble10
                       @ Main.FullPage
                       Main.$fReadFullPage3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Main.FullPage>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Main.FullPage>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.FullPage>_R)
                      @ Main.FullPage
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Main.FullPage))) -}
29ee23d68ab60448765dff93b71530bc
  $fReadResultSets :: GHC.Read.Read Main.ResultSets
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.ResultSets
                  Main.$fReadResultSets_$creadsPrec
                  Main.$fReadResultSets_$creadList
                  Main.$fReadResultSets_$creadPrec
                  Main.$fReadResultSets_$creadListPrec -}
29ee23d68ab60448765dff93b71530bc
  $fReadResultSets1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Main.ResultSets] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Main.ResultSets] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Main.ResultSets
                   Main.$fReadResultSets2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.ResultSets>_R))
                   @ b
                   eta1) -}
29ee23d68ab60448765dff93b71530bc
  $fReadResultSets2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Main.ResultSets
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Main.ResultSets
                   Main.$fReadResultSets3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Main.ResultSets>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Main.ResultSets>_R)))) -}
29ee23d68ab60448765dff93b71530bc
  $fReadResultSets3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Main.ResultSets -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Main.ResultSets -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$creadPrec1 ww1 @ b w1 }) -}
29ee23d68ab60448765dff93b71530bc
  $fReadResultSets4 ::
    Text.ParserCombinators.ReadP.P [Main.ResultSets]
  {- Unfolding: (GHC.Read.$wlist
                   @ Main.ResultSets
                   Main.$fReadResultSets2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.ResultSets>_R))
                   @ [Main.ResultSets]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Main.ResultSets])) -}
29ee23d68ab60448765dff93b71530bc
  $fReadResultSets_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Main.ResultSets]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Main.ResultSets]
                   Main.$fReadResultSets4) -}
29ee23d68ab60448765dff93b71530bc
  $fReadResultSets_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Main.ResultSets]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadResultSets1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Main.ResultSets]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Main.ResultSets]>_R))) -}
29ee23d68ab60448765dff93b71530bc
  $fReadResultSets_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Main.ResultSets
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadResultSets2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Main.ResultSets>_R)) -}
29ee23d68ab60448765dff93b71530bc
  $fReadResultSets_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Main.ResultSets
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Main.ResultSets
                   ((GHC.Read.$fReadDouble10
                       @ Main.ResultSets
                       Main.$fReadResultSets3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Main.ResultSets>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Main.ResultSets>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.ResultSets>_R)
                      @ Main.ResultSets
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Main.ResultSets))) -}
3528369baec837ab39a45b2f834e9b4e
  $fShowFullPage :: GHC.Show.Show Main.FullPage
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.FullPage
                  Main.$fShowFullPage_$cshowsPrec
                  Main.$fShowFullPage_$cshow
                  Main.$fShowFullPage_$cshowList -}
3528369baec837ab39a45b2f834e9b4e
  $fShowFullPage1 :: Main.FullPage -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.FullPage) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.FullPage ww1 ->
                 Main.$w$cshowsPrec 0# ww1 w1 }) -}
88760a0b23246af132fcaf76fa381e33
  $fShowFullPage2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
dc7efb075717bb7c775e4da3f1443308
  $fShowFullPage3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rowSet = "#) -}
614cb46f483a05478931e840ecb5152a
  $fShowFullPage4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ResultSets {"#) -}
df6f04bd9c66376a53f5745269b2e746
  $fShowFullPage5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "resultSets = "#) -}
c5b3bf77add0d712f4ebb14edd4ec620
  $fShowFullPage6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FullPage {"#) -}
3528369baec837ab39a45b2f834e9b4e
  $fShowFullPage_$cshow :: Main.FullPage -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.FullPage) ->
                 Main.$fShowFullPage_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3528369baec837ab39a45b2f834e9b4e
  $fShowFullPage_$cshowList :: [Main.FullPage] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.FullPage
                   Main.$fShowFullPage1) -}
3528369baec837ab39a45b2f834e9b4e
  $fShowFullPage_$cshowsPrec ::
    GHC.Types.Int -> Main.FullPage -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.FullPage)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.FullPage ww3 ->
                 Main.$w$cshowsPrec ww1 ww3 w2 } }) -}
29ee23d68ab60448765dff93b71530bc
  $fShowResultSets :: GHC.Show.Show Main.ResultSets
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.ResultSets
                  Main.$fShowResultSets_$cshowsPrec
                  Main.$fShowResultSets_$cshow
                  Main.$fShowResultSets_$cshowList -}
29ee23d68ab60448765dff93b71530bc
  $fShowResultSets1 :: Main.ResultSets -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.ResultSets) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.ResultSets ww1 ->
                 Main.$w$cshowsPrec1 0# ww1 w1 }) -}
29ee23d68ab60448765dff93b71530bc
  $fShowResultSets_$cshow :: Main.ResultSets -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.ResultSets) ->
                 Main.$fShowResultSets_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
29ee23d68ab60448765dff93b71530bc
  $fShowResultSets_$cshowList :: [Main.ResultSets] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.ResultSets
                   Main.$fShowResultSets1) -}
29ee23d68ab60448765dff93b71530bc
  $fShowResultSets_$cshowsPrec ::
    GHC.Types.Int -> Main.ResultSets -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.ResultSets)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.ResultSets ww3 ->
                 Main.$w$cshowsPrec1 ww1 ww3 w2 } }) -}
afba6eebdd81daecadf750f639b5b2b4
  $s.:10 ::
    [Data.Aeson.Types.Internal.Parser Main.ResultSets]
    -> forall (f :: * -> *) r.
       Data.Aeson.Types.Internal.JSONPath
       -> Data.Aeson.Types.Internal.Failure f r
       -> Data.Aeson.Types.Internal.Success [Main.ResultSets] f r
       -> f r
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U><L,C(U)> -}
a747f2a0ab28b1fca9a9485a217c7788
  $s.:4 ::
    [Data.Aeson.Types.Internal.Parser Types.GameResult]
    -> forall (f :: * -> *) r.
       Data.Aeson.Types.Internal.JSONPath
       -> Data.Aeson.Types.Internal.Failure f r
       -> Data.Aeson.Types.Internal.Success [Types.GameResult] f r
       -> f r
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U><L,C(U)> -}
23999074360c7916b632f45b2c69931e
  $s.:5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "[a]"#) -}
4e5dfccfc352ea1feb3c2cbe78ea16b9
  $s.:_f1 ::
    GHC.Types.Int
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Types.GameResult
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U>,
     Unfolding: (\ (idx :: GHC.Types.Int)
                   (value :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   pathElem17 :: Data.Aeson.Types.Internal.JSONPathElement
                   = case idx of dt { GHC.Types.I# dt1 ->
                     Data.Aeson.Types.Internal.Index dt1 }
                 } in
                 let {
                   p :: Data.Aeson.Types.Internal.Parser Types.GameResult
                   = Main.$fFromJSONGameResult_$cparseJSON value
                 } in
                 (\ @ (f1 :: * -> *)
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f1 r)
                    (ks :: Data.Aeson.Types.Internal.Success Types.GameResult f1 r) ->
                  p `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0] <Types.GameResult>_R)
                    @ f1
                    @ r
                    (GHC.Types.:
                       @ Data.Aeson.Types.Internal.JSONPathElement
                       pathElem17
                       path)
                    kf
                    ks)
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <Types.GameResult>_R))) -}
2da11b27c8bcf5d52cacbe85740fb6f2
  $s.:_f2 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0# 9223372036854775807#) -}
5408a23c3e369ae1df3d89a64488fc22
  $s.:_f4 ::
    GHC.Types.Int
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Main.ResultSets
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U>,
     Unfolding: (\ (idx :: GHC.Types.Int)
                   (value :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   pathElem17 :: Data.Aeson.Types.Internal.JSONPathElement
                   = case idx of dt { GHC.Types.I# dt1 ->
                     Data.Aeson.Types.Internal.Index dt1 }
                 } in
                 let {
                   p :: Data.Aeson.Types.Internal.Parser Main.ResultSets
                   = case value of wild {
                       DEFAULT
                       -> Data.Aeson.Types.Class.typeMismatch
                            @ Main.ResultSets
                            Main.$fFromJSONResultSets2
                            wild
                       Data.Aeson.Types.Internal.Object obj
                       -> Main.$fFromJSONResultSets1 obj }
                 } in
                 (\ @ (f1 :: * -> *)
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f1 r)
                    (ks :: Data.Aeson.Types.Internal.Success Main.ResultSets f1 r) ->
                  p `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0] <Main.ResultSets>_R)
                    @ f1
                    @ r
                    (GHC.Types.:
                       @ Data.Aeson.Types.Internal.JSONPathElement
                       pathElem17
                       path)
                    kf
                    ks)
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <Main.ResultSets>_R))) -}
7b14cbb05039882c91b492f3c58c3c5a
  $sfindWithDefault1 ::
    a -> Types.TeamName -> Data.Map.Base.Map Types.TeamName a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><S,1*U><S,1*U> -}
1f0e1da701bdd3d8b534ff24e491cc2b
  $sfromList ::
    [(Types.TeamName, a)] -> Data.Map.Base.Map Types.TeamName a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Types.TeamName, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Types.TeamName @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Base.Bin
                             @ Types.TeamName
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ Types.TeamName @ a)
                             (Data.Map.Base.Tip @ Types.TeamName @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                Main.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ Types.TeamName
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ Types.TeamName @ a)
                                     (Data.Map.Base.Tip @ Types.TeamName @ a))
                                  wild2 }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                Main.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ Types.TeamName
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ Types.TeamName @ a)
                                     (Data.Map.Base.Tip @ Types.TeamName @ a))
                                  wild2 } } } } } }) -}
e24359957bc1db8fff91c31d917bc9ec
  $sfromList1 ::
    Data.Map.Base.Map Types.TeamName a1
    -> [(Types.TeamName, a1)] -> Data.Map.Base.Map Types.TeamName a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
e4fdc80b6317fe0633ed0cc9729f7bac
  $sfromListWith_$sfromListWithKey ::
    (Types.Team_ID -> a -> a -> a)
    -> [(Types.Team_ID, a)] -> Data.Map.Base.Map Types.Team_ID a
  {- Arity: 2, Strictness: <L,C(C1(C1(U)))><S,1*U>,
     Unfolding: (\ @ a
                   (f :: Types.Team_ID -> a -> a -> a)
                   (xs :: [(Types.Team_ID, a)]) ->
                 letrec {
                   go10 :: Data.Map.Base.Map Types.Team_ID a
                           -> [(Types.Team_ID, a)] -> Data.Map.Base.Map Types.Team_ID a
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (z :: Data.Map.Base.Map Types.Team_ID a)
                       (ds :: [(Types.Team_ID, a)]) ->
                     case ds of wild {
                       [] -> z
                       : x xs1
                       -> case x of wild1 { (,) k1 x1 ->
                          case k1 of ww { GHC.Types.I# ww1 ->
                          case Main.$w$sgo10 @ a f ww1 x1 z of z' { DEFAULT ->
                          go10 z' xs1 } } } }
                 } in
                 go10 (Data.Map.Base.Tip @ Types.Team_ID @ a) xs) -}
37ecf7535762922a11a568f9e144d4f9
  $smember1 ::
    Types.TeamName
    -> Data.Map.Base.Map Types.TeamName a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f8e6d4f635ce4b37ac47669d0cc93989
  $sparseJSON4 ::
    GHC.Types.Int
    -> Data.Aeson.Types.Internal.Value
    -> forall (f :: * -> *) r.
       Data.Aeson.Types.Internal.JSONPath
       -> Data.Aeson.Types.Internal.Failure f r
       -> Data.Aeson.Types.Internal.Success
            Data.Aeson.Types.Internal.Value f r
       -> f r
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,U><L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (5, True, True)
                (\ (idx :: GHC.Types.Int)
                   (value :: Data.Aeson.Types.Internal.Value)
                   @ (f :: * -> *)
                   @ r
                   (eta :: Data.Aeson.Types.Internal.JSONPath)
                   (eta1 :: Data.Aeson.Types.Internal.Failure f r)
                   (eta2 :: Data.Aeson.Types.Internal.Success
                              Data.Aeson.Types.Internal.Value f r) ->
                 eta2 value) -}
c49f29181ae911e063df5ce906e2638f
  $sparseJSON5 ::
    [Data.Aeson.Types.Internal.Parser Data.Aeson.Types.Internal.Value]
    -> forall (f :: * -> *) r.
       Data.Aeson.Types.Internal.JSONPath
       -> Data.Aeson.Types.Internal.Failure f r
       -> Data.Aeson.Types.Internal.Success
            [Data.Aeson.Types.Internal.Value] f r
       -> f r
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U><L,C(U)> -}
946d1897bcb912073f6c2c04061ea74e
  $tc'FullPage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15895107302523406642##
                   15313250280546613959##
                   Main.$trModule
                   Main.$tc'FullPage1) -}
348cd34f81261267b7f1f108433935ff
  $tc'FullPage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FullPage"#) -}
a207add50d0320734553bdd551ab7aaf
  $tc'ResultSets :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10921611092274247662##
                   13934650431066652246##
                   Main.$trModule
                   Main.$tc'ResultSets1) -}
37cdad5729b23f468e4ce5b2a35d386c
  $tc'ResultSets1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ResultSets"#) -}
fff178e5442fbb264dc326105e0361da
  $tcFullPage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8325809315013504257##
                   3867607796358658626##
                   Main.$trModule
                   Main.$tcFullPage1) -}
538dc3fc3bc8a6bbdc453467465cdd76
  $tcFullPage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FullPage"#) -}
e76ce6258aef210db3f87a7471e26422
  $tcResultSets :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10171188741903834720##
                   16448238425454281958##
                   Main.$trModule
                   Main.$tcResultSets1) -}
78128e00859e3340802e8dcf57e1e532
  $tcResultSets1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ResultSets"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
3528369baec837ab39a45b2f834e9b4e
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (Main.FullPage -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
29ee23d68ab60448765dff93b71530bc
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (Main.ResultSets -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
432be14227cff48463244992c20d321d
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> [Main.ResultSets] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Main.ResultSets])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowFullPage6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowFullPage5
                          (let {
                             s :: GHC.Base.String
                             = GHC.Base.++ @ GHC.Types.Char Main.$fShowFullPage2 x
                           } in
                           case ww1 of wild {
                             [] -> GHC.CString.unpackAppendCString# "[]"# s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__2
                                  (case x1 of ww2 { Main.ResultSets ww3 ->
                                   Main.$w$cshowsPrec1
                                     0#
                                     ww3
                                     (let {
                                        lvl38 :: [GHC.Types.Char]
                                        = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 s
                                      } in
                                      letrec {
                                        showl :: [Main.ResultSets] -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [Main.ResultSets]) ->
                                          case ds2 of wild1 {
                                            [] -> lvl38
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.shows7
                                                 (case y of ww4 { Main.ResultSets ww5 ->
                                                  Main.$w$cshowsPrec1 0# ww5 (showl ys) }) }
                                      } in
                                      showl xs) }) }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)) }) -}
b70569c4afbe336fdda11f8b2f88808d
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [Types.GameResult] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Types.GameResult])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowFullPage4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowFullPage3
                          (let {
                             s :: GHC.Base.String
                             = GHC.Base.++ @ GHC.Types.Char Main.$fShowFullPage2 x
                           } in
                           case ww1 of wild {
                             [] -> GHC.CString.unpackAppendCString# "[]"# s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__2
                                  (Types.$fShowGameLogsByTeam3
                                     x1
                                     (let {
                                        lvl38 :: [GHC.Types.Char]
                                        = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 s
                                      } in
                                      letrec {
                                        showl :: [Types.GameResult] -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [Types.GameResult]) ->
                                          case ds2 of wild1 {
                                            [] -> lvl38
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.shows7
                                                 (Types.$fShowGameLogsByTeam3 y (showl ys)) }
                                      } in
                                      showl xs)) }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)) }) -}
556354b087387083a34cfe45d8944be5
  $w$sgo10 ::
    (Types.Team_ID -> a1 -> a1 -> a1)
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map Types.Team_ID a1
    -> Data.Map.Base.Map Types.Team_ID a1
  {- Arity: 4, Strictness: <L,1*C1(C1(C1(U)))><L,U><L,U><S,1*U>,
     Inline: [0] -}
f8943f5cd7428330d67a7ca31b565576
  $wgo ::
    [(Types.GameResult, Types.GameResult)]
    -> GHC.Prim.Double# -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
06932b6975b692ab93669a51e33a6874
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Types.TeamName a
    -> [(Types.TeamName, a)]
    -> Data.Map.Base.Map Types.TeamName a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
c2f46a5149cfc611150ada80d195e000
  $wrecordThroughDays ::
    ([[Types.GameResult]], [[Types.GameResult]])
    -> (# [(Types.TeamName, GHC.Types.Int)],
          [(Types.TeamName, GHC.Types.Int)] #)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>, Inline: [0],
     Unfolding: (\ (w :: ([[Types.GameResult]],
                          [[Types.GameResult]])) ->
                 (# Main.initTeam
                      Types.teams
                      (Main.replaceTeamName
                         Types.teams
                         (case w of wild { (,) x ds1 ->
                          Data.Map.Base.toAscList1
                            @ GHC.Types.Int
                            @ GHC.Types.Int
                            (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                            (Main.$sfromListWith_$sfromListWithKey
                               @ GHC.Types.Int
                               Main.checkInterval4
                               (Main.checkInterval_go
                                  (GHC.Base.map
                                     @ [Types.GameResult]
                                     @ GHC.Types.Int
                                     Main.checkInterval3
                                     x))) })),
                    Main.initTeam
                      Types.teams
                      (Main.replaceTeamName
                         Types.teams
                         (case w of wild { (,) ds1 y ->
                          Data.Map.Base.toAscList1
                            @ GHC.Types.Int
                            @ GHC.Types.Int
                            (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                            (Main.$sfromListWith_$sfromListWithKey
                               @ GHC.Types.Int
                               Main.checkInterval4
                               (Main.checkInterval_go
                                  (GHC.Base.map
                                     @ [Types.GameResult]
                                     @ GHC.Types.Int
                                     Main.checkInterval3
                                     y))) })) #)) -}
13c7c34bb0041bf7707e9b905b2ce4a5
  $wstretchResults ::
    [(Types.TeamName, GHC.Types.Int)]
    -> [(Types.TeamName, GHC.Types.Int)]
    -> [(Types.TeamName, Types.Wins, Types.Losses)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [(Types.TeamName, GHC.Types.Int)])
                   (ww1 :: [(Types.TeamName, GHC.Types.Int)]) ->
                 letrec {
                   go1 :: [(Types.TeamName, GHC.Types.Int)]
                          -> [(Types.TeamName, Types.Wins, Types.Losses)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Types.TeamName, GHC.Types.Int)]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ (Types.TeamName, Types.Wins, Types.Losses)
                       : y ys
                       -> let {
                            lvl38 :: Types.TeamName = case y of wild1 { (,) x ds1 -> x }
                          } in
                          let {
                            z :: [(Types.TeamName, Types.Wins, Types.Losses)] = go1 ys
                          } in
                          letrec {
                            go2 :: [(Types.TeamName, GHC.Types.Int)]
                                   -> [(Types.TeamName, Types.Wins, Types.Losses)]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds1 :: [(Types.TeamName, GHC.Types.Int)]) ->
                              case ds1 of wild1 {
                                [] -> z
                                : y1 ys1
                                -> case y1 of wild2 { (,) x ds2 ->
                                   case GHC.Base.eqString lvl38 x of wild3 {
                                     GHC.Types.False -> go2 ys1
                                     GHC.Types.True
                                     -> GHC.Types.:
                                          @ (Types.TeamName, Types.Wins, Types.Losses)
                                          (case y of wild4 { (,) t u -> (t, u, ds2) })
                                          (go2 ys1) } } }
                          } in
                          go2 ww1 }
                 } in
                 go1 ww) -}
7c636504138fe207e3ab7b0bcac28404
  $wsumInts ::
    (Types.GameResult -> GHC.Types.Double)
    -> [(Types.GameResult, Types.GameResult)] -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U(U))><S,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: Types.GameResult -> GHC.Types.Double)
                   (w1 :: [(Types.GameResult, Types.GameResult)]) ->
                 letrec {
                   $wgo3 :: [(Types.GameResult, Types.GameResult)]
                            -> GHC.Prim.Double# -> GHC.Prim.Double#
                     {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                   = \ (w2 :: [(Types.GameResult, Types.GameResult)])
                       (ww :: GHC.Prim.Double#) ->
                     case w2 of wild {
                       [] -> ww
                       : y ys
                       -> case y of wild1 { (,) x y1 ->
                          case w x of wild2 { GHC.Types.D# x1 ->
                          case w y1 of wild3 { GHC.Types.D# y2 ->
                          $wgo3 ys (GHC.Prim.+## ww (GHC.Prim.-## x1 y2)) } } } }
                 } in
                 $wgo3 w1 0.0##) -}
bf80c12d0c566be54cd0c3fed12453b1
  $wsumPct ::
    (Types.GameResult -> GHC.Types.Double)
    -> [(Types.GameResult, Types.GameResult)] -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U(U))><S,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: Types.GameResult -> GHC.Types.Double)
                   (w1 :: [(Types.GameResult, Types.GameResult)]) ->
                 letrec {
                   $wgo3 :: [(Types.GameResult, Types.GameResult)]
                            -> GHC.Prim.Double# -> GHC.Prim.Double#
                     {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                   = \ (w2 :: [(Types.GameResult, Types.GameResult)])
                       (ww :: GHC.Prim.Double#) ->
                     case w2 of wild {
                       [] -> ww
                       : y ys
                       -> case y of wild1 { (,) x y1 ->
                          case w x of wild2 { GHC.Types.D# x1 ->
                          case w y1 of wild3 { GHC.Types.D# y2 ->
                          $wgo3 ys (GHC.Prim.+## ww (GHC.Prim.-## x1 y2)) } } } }
                 } in
                 $wgo3 w1 0.0##) -}
3528369baec837ab39a45b2f834e9b4e
  data FullPage = FullPage {resultSets :: [Main.ResultSets]}
29ee23d68ab60448765dff93b71530bc
  data ResultSets = ResultSets {rowSet :: [Types.GameResult]}
9b384ca677b738808fd0ca5bf7248a0b
  checkDates ::
    Types.GameDate -> Types.DayDiff -> Types.GameDate -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ (day1 :: Types.GameDate)
                   (dayDiff :: Types.DayDiff)
                   (day2 :: Types.GameDate) ->
                 let {
                   d2 :: Data.Time.Calendar.Days.Day
                   = Data.Time.Format.Parse.parseTimeOrError
                       @ Data.Time.Calendar.Days.Day
                       Data.Time.Format.Parse.$fParseTimeDay_$cbuildTime
                         `cast`
                       (Sym (Data.Time.Format.Parse.N:ParseTime[0]
                                 <Data.Time.Calendar.Days.Day>_N))
                       GHC.Types.False
                       Data.Time.Format.Locale.defaultTimeLocale
                       Main.checkDates2
                       day2
                 } in
                 let {
                   d1 :: Data.Time.Calendar.Days.Day
                   = Data.Time.Format.Parse.parseTimeOrError
                       @ Data.Time.Calendar.Days.Day
                       Data.Time.Format.Parse.$fParseTimeDay_$cbuildTime
                         `cast`
                       (Sym (Data.Time.Format.Parse.N:ParseTime[0]
                                 <Data.Time.Calendar.Days.Day>_N))
                       GHC.Types.False
                       Data.Time.Format.Locale.defaultTimeLocale
                       Main.checkDates2
                       day1
                 } in
                 case GHC.Integer.Type.ltInteger#
                        Main.checkDates1
                        (GHC.Integer.Type.minusInteger
                           d1 `cast` (Data.Time.Calendar.Days.N:Day[0])
                           d2 `cast` (Data.Time.Calendar.Days.N:Day[0])) of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Integer.Type.leInteger#
                             (GHC.Integer.Type.minusInteger
                                d1 `cast` (Data.Time.Calendar.Days.N:Day[0])
                                d2 `cast` (Data.Time.Calendar.Days.N:Day[0]))
                             dayDiff of wild2 { DEFAULT ->
                      GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 } } }) -}
743aae70eadf8a3bf3b0920163799e6c
  checkDates1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
17fd2560ad3347eeb2b858e854f95a8a
  checkDates2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "%b %d, %Y"#) -}
48dfbe235aef6fb2e7c61c0e17e509c8
  checkFullPage ::
    Data.Either.Either GHC.Base.String (GHC.Base.Maybe Main.FullPage)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Either.Either
                            GHC.Base.String (GHC.Base.Maybe Main.FullPage)) ->
                 case ds of wild {
                   Data.Either.Left err -> err
                   Data.Either.Right ds1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> Main.checkFullPage1
                        GHC.Base.Just x
                        -> case x of wild2 { Main.FullPage ds2 ->
                           case ds2 of wild3 {
                             [] -> case GHC.List.badHead ret_ty GHC.Base.String of {}
                             : x1 ds3
                             -> case x1 of wild4 { Main.ResultSets ds4 ->
                                GHC.Show.showList__
                                  @ Types.GameResult
                                  Types.$fShowGameLogsByTeam3
                                  ds4
                                  (GHC.Types.[] @ GHC.Types.Char) } } } } }) -}
cdc378a52189da925a1e6464eadcc643
  checkFullPage1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Maybe failed somewhere."#) -}
3e6c9d616879b1b8a1ea9897fb550ddc
  checkInterval ::
    [Types.GameResult]
    -> [(Types.GameResult, Types.GameResult)]
    -> Types.DayDiff
    -> Types.NumGamesPlayed
    -> [(Types.TeamName, Types.Wins, Types.Losses)]
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U(U)>,
     Unfolding: (\ (whole :: [Types.GameResult])
                   (tup :: [(Types.GameResult, Types.GameResult)])
                   (interval :: Types.DayDiff)
                   (games_played :: Types.NumGamesPlayed) ->
                 case Main.$wrecordThroughDays
                        (Main.gameDayInterval
                           whole
                           (GHC.Base.map
                              @ (Types.GameResult, Types.GameResult)
                              @ (GHC.Types.Int, GHC.Base.String)
                              Main.checkInterval2
                              tup)
                           interval
                           games_played,
                         Main.gameDayInterval
                           whole
                           (GHC.Base.map
                              @ (Types.GameResult, Types.GameResult)
                              @ (GHC.Types.Int, GHC.Base.String)
                              Main.checkInterval1
                              tup)
                           interval
                           games_played) of ww { (#,#) ww1 ww2 ->
                 Main.$wstretchResults ww1 ww2 }) -}
ca7b8f1727369ed54be92c83ee49ee51
  checkInterval1 ::
    (Types.GameResult, Types.GameResult)
    -> (GHC.Types.Int, GHC.Base.String)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(A,U(1*U(U),A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Types.GameResult, Types.GameResult)) ->
                 case ds of wild { (,) ds1 y ->
                 (Types.team_ID y, Types.game_date y) }) -}
0f9cd04282328857235131f865e38452
  checkInterval2 ::
    (Types.GameResult, Types.GameResult)
    -> (GHC.Types.Int, GHC.Base.String)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U(1*U(U),A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Types.GameResult, Types.GameResult)) ->
                 case ds of wild { (,) x ds1 ->
                 (Types.team_ID x, Types.game_date x) }) -}
1b9bb582a976e3c7670527cd6a083d17
  checkInterval3 :: [Types.GameResult] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Types.GameResult]) ->
                 case x of wild {
                   [] -> case GHC.List.badHead ret_ty GHC.Types.Int of {}
                   : x1 ds1
                   -> case x1 of wild1 { Types.GameResult ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                      ds2 } }) -}
1092bb3e41986aacc27c808277c8242b
  checkInterval4 ::
    Types.Team_ID -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (ds :: Types.Team_ID)
                   (x :: GHC.Types.Int)[OneShot]
                   (y :: GHC.Types.Int)[OneShot] ->
                 GHC.Num.$fNumInt_$c+ x y) -}
2bd57fc8ebb9bde4f75030a115cc48ca
  checkInterval_go ::
    [Types.Team_ID] -> [(Types.Team_ID, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
1e0a6a1f7a5d14500bdb99e804a93aa7
  effectiveFieldGoalPct ::
    [(Types.GameResult, Types.GameResult)] -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [(Types.GameResult, Types.GameResult)]) ->
                 case Main.$wgo w 0.0## of ww { DEFAULT -> GHC.Types.D# ww }) -}
fb6e970dbf81cc024142fcac1cb8edb3
  frequency :: [Types.Team_ID] -> [(Types.Team_ID, GHC.Types.Int)]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: [Types.Team_ID]) ->
                 Data.Map.Base.toAscList1
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                   (Main.$sfromListWith_$sfromListWithKey
                      @ GHC.Types.Int
                      Main.checkInterval4
                      (Main.checkInterval_go xs))) -}
1b24cdc6a4c5a508d0982946be037381
  gameDayInterval ::
    [Types.GameResult]
    -> [(Types.Team_ID, Types.GameDate)]
    -> Types.DayDiff
    -> Types.NumGamesPlayed
    -> [[Types.GameResult]]
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><L,U(U)> -}
a2aa9e465e1a5db13afd8d427e50808f
  getBoxScores ::
    [Types.GameResult]
    -> [(Types.WinningTeamGameResult, Types.LosingTeamGameResult)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2c45e4f169e868cff99d1d557965f2e2
  getGamesByTeam ::
    [Types.Teams]
    -> [Types.GameResult] -> [(Types.Team_ID, [Types.Game_ID])]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ts :: [Types.Teams]) (grs :: [Types.GameResult]) ->
                 GHC.Base.map
                   @ (Types.TeamName, GHC.Types.Int, Types.TeamABBR)
                   @ (GHC.Types.Int, [GHC.Base.String])
                   (\ (ds :: (Types.TeamName, GHC.Types.Int, Types.TeamABBR)) ->
                    case ds of wild { (,,) a b c ->
                    (b,
                     letrec {
                       go1 :: [Types.GameResult] -> [[GHC.Types.Char]]
                         {- Arity: 1, Strictness: <S,1*U> -}
                       = \ (ds1 :: [Types.GameResult]) ->
                         case ds1 of wild1 {
                           [] -> GHC.Types.[] @ [GHC.Types.Char]
                           : y ys
                           -> case y of wild2 { Types.GameResult ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                              case ds2 of wild3 { GHC.Types.I# x ->
                              case b of wild4 { GHC.Types.I# y1 ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.==# x y1) of wild5 {
                                GHC.Types.False -> go1 ys
                                GHC.Types.True
                                -> GHC.Types.: @ [GHC.Types.Char] ds3 (go1 ys) } } } } }
                     } in
                     go1 grs) })
                   ts) -}
f1c35f7b0e4c66658ce47455ccc5c51c
  getJSON :: GHC.Types.IO [Data.ByteString.Lazy.Internal.ByteString]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.getJSON1
                  `cast`
                (Sym (GHC.Types.N:IO[0]
                          <[Data.ByteString.Lazy.Internal.ByteString]>_R)) -}
7015f7f964e7ce88ac42838fc8402616
  getJSON1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [Data.ByteString.Lazy.Internal.ByteString] #)
  {- Arity: 1, Unfolding: (Main.getJSON2 Main.teamURLS) -}
94007ac4e5e4fa3f31bcfc5933c38ad6
  getJSON2 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [Data.ByteString.Lazy.Internal.ByteString] #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
f0fd1febad552dc0fa29c19e8879af31
  initTeam ::
    [Types.Teams]
    -> [(Types.TeamName, GHC.Types.Int)]
    -> [(Types.TeamName, GHC.Types.Int)]
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ts :: [Types.Teams])
                   (rs :: [(Types.TeamName, GHC.Types.Int)]) ->
                 GHC.Base.map
                   @ (Types.TeamName, Types.Team_ID, Types.TeamABBR)
                   @ (Types.TeamName, GHC.Types.Int)
                   (\ (ds :: (Types.TeamName, Types.Team_ID, Types.TeamABBR)) ->
                    case ds of wild { (,,) a b c ->
                    case Main.$smember1
                           @ GHC.Types.Int
                           a
                           (Main.$sfromList @ GHC.Types.Int rs) of wild1 {
                      GHC.Types.False -> (a, Main.initTeam1)
                      GHC.Types.True
                      -> (a,
                          Main.$sfindWithDefault1
                            @ GHC.Types.Int
                            Main.initTeam1
                            a
                            (Main.$sfromList @ GHC.Types.Int rs)) } })
                   ts) -}
78659978c89456ea775d82040da556c5
  initTeam1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
b08d228f4059532a99441778635cdde9
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
74a46d3288aa83a193b86181b94b3979
  recordThroughDays ::
    ([[Types.GameResult]], [[Types.GameResult]])
    -> ([(Types.TeamName, GHC.Types.Int)],
        [(Types.TeamName, GHC.Types.Int)])
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ([[Types.GameResult]], [[Types.GameResult]])) ->
                 case Main.$wrecordThroughDays w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
8713e7479062d39e7926871618a5ed5e
  removeOvertime :: [Types.GameResult] -> [Types.GameResult]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.List.filter
                   @ Types.GameResult
                   Main.removeOvertime1) -}
9b38d7aae1211063ed3e6d6d923bc303
  removeOvertime1 :: Types.GameResult -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLS(S)LLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.GameResult) ->
                 case x of wild { Types.GameResult ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ->
                 case ds9 of wild1 { GHC.Types.D# x1 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<=## x1 240.0##) } }) -}
bf5619f71d8420b9a227c1e36ad112d9
  replaceTeamName ::
    [Types.Teams]
    -> [(Types.Team_ID, GHC.Types.Int)]
    -> [(Types.TeamName, GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ts :: [Types.Teams])
                   (rs :: [(Types.Team_ID, GHC.Types.Int)]) ->
                 letrec {
                   go1 :: [Types.Teams] -> [(Types.TeamName, GHC.Types.Int)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Types.Teams]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ (Types.TeamName, GHC.Types.Int)
                       : y ys
                       -> case y of wild1 { (,,) t u v ->
                          let {
                            z :: [(Types.TeamName, GHC.Types.Int)] = go1 ys
                          } in
                          letrec {
                            go2 :: [(Types.Team_ID, GHC.Types.Int)]
                                   -> [(Types.TeamName, GHC.Types.Int)]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds1 :: [(Types.Team_ID, GHC.Types.Int)]) ->
                              case ds1 of wild2 {
                                [] -> z
                                : y1 ys1
                                -> case u of wild3 { GHC.Types.I# x ->
                                   case y1 of wild4 { (,) x1 ds2 ->
                                   case x1 of wild5 { GHC.Types.I# y2 ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.==# x y2) of wild6 {
                                     GHC.Types.False -> go2 ys1
                                     GHC.Types.True
                                     -> GHC.Types.:
                                          @ (Types.TeamName, GHC.Types.Int)
                                          (t, ds2)
                                          (go2 ys1) } } } } }
                          } in
                          go2 rs } }
                 } in
                 go1 ts) -}
7a212439ba5ef839880c253466ec4873
  resultSets :: Main.FullPage -> [Main.ResultSets]
  RecSel Left Main.FullPage
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.FullPage) ->
                 case ds of wild { Main.FullPage ds1 -> ds1 }) -}
415ea140506c4552270febee876435af
  rowSet :: Main.ResultSets -> [Types.GameResult]
  RecSel Left Main.ResultSets
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ResultSets) ->
                 case ds of wild { Main.ResultSets ds1 -> ds1 }) -}
15a33ad6b3cf5460080b865d863adaff
  showResult :: Main.FullPage -> [Types.GameResult]
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.FullPage) ->
                 case x of wild { Main.FullPage ds ->
                 case ds of wild1 {
                   [] -> case GHC.List.badHead ret_ty [Types.GameResult] of {}
                   : x1 ds1 -> case x1 of wild2 { Main.ResultSets ds2 -> ds2 } } }) -}
9f9c5d57ece4b76cc213669bc0e9363a
  splitHomeAwayTeams ::
    [Types.GameResult]
    -> ([Types.HomeTeamGameResult], [Types.AwayTeamGameResult])
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Data.OldList.partition
                   @ Types.GameResult
                   Main.splitHomeAwayTeams1) -}
0d76bc3d8c5a4e52453c6830136fd3c9
  splitHomeAwayTeams1 :: Types.GameResult -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.GameResult) ->
                 case x of wild { Types.GameResult ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ->
                 GHC.List.elem
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   Main.splitHomeAwayTeams2
                   ds4 }) -}
cf267238167d7c58d4c826f42275802b
  splitHomeAwayTeams2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '@'#) -}
9ca173eb075250f475f02085bd9397c8
  splitWinLossTeams ::
    [Types.GameResult]
    -> ([Types.WinningTeamGameResult], [Types.LosingTeamGameResult])
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Data.OldList.partition
                   @ Types.GameResult
                   Main.splitWinLossTeams1) -}
d253b7f2077f46c0072fbb27e8ccbc25
  splitWinLossTeams1 :: Types.GameResult -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS(S)LLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.GameResult) ->
                 case x of wild { Types.GameResult ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ->
                 case ds5 of wild1 { GHC.Types.C# x1 ->
                 case x1 of wild2 {
                   DEFAULT -> GHC.Types.False 'W'# -> GHC.Types.True } } }) -}
aecb38bb8dfc42f9a90fc8e01173379d
  stretchResults ::
    ([(Types.TeamName, GHC.Types.Int)],
     [(Types.TeamName, GHC.Types.Int)])
    -> [(Types.TeamName, Types.Wins, Types.Losses)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ([(Types.TeamName, GHC.Types.Int)],
                          [(Types.TeamName, GHC.Types.Int)])) ->
                 case w of ww { (,) ww1 ww2 -> Main.$wstretchResults ww1 ww2 }) -}
00736fb859efe3e0683421fd314eabb5
  sumInts ::
    (Types.GameResult -> GHC.Types.Double)
    -> [(Types.GameResult, Types.GameResult)] -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U(U))><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.GameResult -> GHC.Types.Double)
                   (w1 :: [(Types.GameResult, Types.GameResult)]) ->
                 case Main.$wsumInts w w1 of ww { DEFAULT -> GHC.Types.D# ww }) -}
2b358c021246d898aa8c88b7750393a6
  sumPct ::
    (Types.GameResult -> GHC.Types.Double)
    -> [(Types.GameResult, Types.GameResult)] -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U(U))><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.GameResult -> GHC.Types.Double)
                   (w1 :: [(Types.GameResult, Types.GameResult)]) ->
                 case Main.$wsumPct w w1 of ww { DEFAULT -> GHC.Types.D# ww }) -}
0eae807e3b02c07d1749b30ea2708340
  teamURLS :: [GHC.Base.String]
  {- Unfolding: (GHC.Base.map
                   @ (Types.TeamName, Types.Team_ID, Types.TeamABBR)
                   @ [GHC.Types.Char]
                   Main.teamURLS1
                   Types.teams) -}
8133341d0b6bfa0cf2f3e2eff4afb62c
  teamURLS1 ::
    (Types.TeamName, Types.Team_ID, Types.TeamABBR) -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: (Types.TeamName, Types.Team_ID,
                           Types.TeamABBR)) ->
                 case ds of wild { (,,) ds1 team_id ds2 ->
                 GHC.CString.unpackAppendCString#
                   "http://stats.nba.com/stats/teamgamelog/?Season=2016-17&SeasonType=Regular%20Season&TeamID="#
                   (case team_id of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           0#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }) -}
instance GHC.Classes.Eq [Main.FullPage] = Main.$fEqFullPage
instance GHC.Classes.Eq [Main.ResultSets] = Main.$fEqResultSets
instance Data.Aeson.Types.Class.FromJSON [Main.FullPage]
  = Main.$fFromJSONFullPage
instance Data.Aeson.Types.Class.FromJSON [Types.GameResult]
  = Main.$fFromJSONGameResult
instance Data.Aeson.Types.Class.FromJSON [Main.ResultSets]
  = Main.$fFromJSONResultSets
instance GHC.Read.Read [Main.FullPage] = Main.$fReadFullPage
instance GHC.Read.Read [Main.ResultSets] = Main.$fReadResultSets
instance GHC.Show.Show [Main.FullPage] = Main.$fShowFullPage
instance GHC.Show.Show [Main.ResultSets] = Main.$fShowResultSets
"SPEC/Main fromList @ TeamName _" [ALWAYS] forall @ a
                                                  ($dOrd :: GHC.Classes.Ord Types.TeamName)
  Data.Map.Base.fromList @ [GHC.Types.Char] @ a $dOrd
  = Main.$sfromList @ a
"SPEC/Main fromListWithKey @ Team_ID _" [ALWAYS] forall @ a
                                                        ($dOrd :: GHC.Classes.Ord Types.Team_ID)
  Data.Map.Base.fromListWithKey @ GHC.Types.Int @ a $dOrd
  = Main.$sfromListWith_$sfromListWithKey @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

