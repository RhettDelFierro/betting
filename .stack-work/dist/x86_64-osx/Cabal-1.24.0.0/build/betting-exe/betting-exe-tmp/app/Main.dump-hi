
==================== FINAL INTERFACE ====================
2017-01-18 04:27:54.861467 UTC

interface main@main:Main 8001
  interface hash: 717d857b4f377fe0f82fb021beb86db2
  ABI hash: 5298fe0e5609931a451792ad2c4c5ef1
  export-list hash: 21185dccc9ad3e56eabcfc55562e7818
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2619c9f12a055c1bb081f936714d80a7
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.WinningTeamStats{Main.WinningTeamStats assists fieldGoalPct fouls freeTAtt freeTMade home offReb pointDiff rebounds sFouls steals threeFGA threeFGM turnovers}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
70525419f0785a7cc184a4d7da1c956b
  $fEqWinningTeamStats :: GHC.Classes.Eq Main.WinningTeamStats
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.WinningTeamStats
                  Main.$fEqWinningTeamStats_$c==
                  Main.$fEqWinningTeamStats_$c/= -}
70525419f0785a7cc184a4d7da1c956b
  $fEqWinningTeamStats_$c/= ::
    Main.WinningTeamStats -> Main.WinningTeamStats -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.WinningTeamStats) (b :: Main.WinningTeamStats) ->
                 case Main.$fEqWinningTeamStats_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
70525419f0785a7cc184a4d7da1c956b
  $fEqWinningTeamStats_$c== ::
    Main.WinningTeamStats -> Main.WinningTeamStats -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.WinningTeamStats) (w1 :: Main.WinningTeamStats) ->
                 case w of ww { Main.WinningTeamStats ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 case ww1 of ww15 { GHC.Types.I# ww16 ->
                 case w1 of ww17 { Main.WinningTeamStats ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ->
                 case ww18 of ww32 { GHC.Types.I# ww33 ->
                 Main.$w$c==
                   ww16
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww33
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31 } } } }) -}
70525419f0785a7cc184a4d7da1c956b
  $fOrdWinningTeamStats :: GHC.Classes.Ord Main.WinningTeamStats
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.WinningTeamStats
                  Main.$fEqWinningTeamStats
                  Main.$fOrdWinningTeamStats_$ccompare
                  Main.$fOrdWinningTeamStats_$c<
                  Main.$fOrdWinningTeamStats_$c<=
                  Main.$fOrdWinningTeamStats_$c>
                  Main.$fOrdWinningTeamStats_$c>=
                  Main.$fOrdWinningTeamStats_$cmax
                  Main.$fOrdWinningTeamStats_$cmin -}
70525419f0785a7cc184a4d7da1c956b
  $fOrdWinningTeamStats_$c< ::
    Main.WinningTeamStats -> Main.WinningTeamStats -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.WinningTeamStats) (w1 :: Main.WinningTeamStats) ->
                 case w of ww { Main.WinningTeamStats ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 case ww1 of ww15 { GHC.Types.I# ww16 ->
                 case w1 of ww17 { Main.WinningTeamStats ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ->
                 case ww18 of ww32 { GHC.Types.I# ww33 ->
                 Main.$w$c<
                   ww16
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww33
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31 } } } }) -}
70525419f0785a7cc184a4d7da1c956b
  $fOrdWinningTeamStats_$c<= ::
    Main.WinningTeamStats -> Main.WinningTeamStats -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.WinningTeamStats) (w1 :: Main.WinningTeamStats) ->
                 case w of ww { Main.WinningTeamStats ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 case ww1 of ww15 { GHC.Types.I# ww16 ->
                 case w1 of ww17 { Main.WinningTeamStats ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ->
                 case ww18 of ww32 { GHC.Types.I# ww33 ->
                 Main.$w$c<=
                   ww16
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww33
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31 } } } }) -}
70525419f0785a7cc184a4d7da1c956b
  $fOrdWinningTeamStats_$c> ::
    Main.WinningTeamStats -> Main.WinningTeamStats -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.WinningTeamStats) (w1 :: Main.WinningTeamStats) ->
                 case w of ww { Main.WinningTeamStats ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 case ww1 of ww15 { GHC.Types.I# ww16 ->
                 case w1 of ww17 { Main.WinningTeamStats ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ->
                 case ww18 of ww32 { GHC.Types.I# ww33 ->
                 Main.$w$c>
                   ww16
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww33
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31 } } } }) -}
70525419f0785a7cc184a4d7da1c956b
  $fOrdWinningTeamStats_$c>= ::
    Main.WinningTeamStats -> Main.WinningTeamStats -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.WinningTeamStats) (w1 :: Main.WinningTeamStats) ->
                 case w of ww { Main.WinningTeamStats ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 case ww1 of ww15 { GHC.Types.I# ww16 ->
                 case w1 of ww17 { Main.WinningTeamStats ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ->
                 case ww18 of ww32 { GHC.Types.I# ww33 ->
                 Main.$w$c>=
                   ww16
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww33
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31 } } } }) -}
70525419f0785a7cc184a4d7da1c956b
  $fOrdWinningTeamStats_$ccompare ::
    Main.WinningTeamStats
    -> Main.WinningTeamStats -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLLLLLLLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.WinningTeamStats) (w1 :: Main.WinningTeamStats) ->
                 case w of ww { Main.WinningTeamStats ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 case ww1 of ww15 { GHC.Types.I# ww16 ->
                 case w1 of ww17 { Main.WinningTeamStats ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ->
                 case ww18 of ww32 { GHC.Types.I# ww33 ->
                 Main.$w$ccompare
                   ww16
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww33
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31 } } } }) -}
70525419f0785a7cc184a4d7da1c956b
  $fOrdWinningTeamStats_$cmax ::
    Main.WinningTeamStats
    -> Main.WinningTeamStats -> Main.WinningTeamStats
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLLLLLLLLLLLL),U(U(U),U(U),U(U),U,U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U))><S(S(S)LLLLLLLLLLLLL),U(U(U),U(U),U(U),U,U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.WinningTeamStats) (y :: Main.WinningTeamStats) ->
                 case Main.$fOrdWinningTeamStats_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
70525419f0785a7cc184a4d7da1c956b
  $fOrdWinningTeamStats_$cmin ::
    Main.WinningTeamStats
    -> Main.WinningTeamStats -> Main.WinningTeamStats
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLLLLLLLLLLLL),U(U(U),U(U),U(U),U,U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U))><S(S(S)LLLLLLLLLLLLL),U(U(U),U(U),U(U),U,U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.WinningTeamStats) (y :: Main.WinningTeamStats) ->
                 case Main.$fOrdWinningTeamStats_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
70525419f0785a7cc184a4d7da1c956b
  $fShowWinningTeamStats :: GHC.Show.Show Main.WinningTeamStats
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.WinningTeamStats
                  Main.$fShowWinningTeamStats_$cshowsPrec
                  Main.$fShowWinningTeamStats_$cshow
                  Main.$fShowWinningTeamStats_$cshowList -}
70525419f0785a7cc184a4d7da1c956b
  $fShowWinningTeamStats1 :: Main.WinningTeamStats -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.WinningTeamStats) ->
                 case w of ww { Main.WinningTeamStats ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Main.$w$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14 }) -}
70525419f0785a7cc184a4d7da1c956b
  $fShowWinningTeamStats_$cshow ::
    Main.WinningTeamStats -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U(U),1*U(U),U(U),U,U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.WinningTeamStats) ->
                 Main.$fShowWinningTeamStats_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
70525419f0785a7cc184a4d7da1c956b
  $fShowWinningTeamStats_$cshowList ::
    [Main.WinningTeamStats] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.WinningTeamStats
                   Main.$fShowWinningTeamStats1) -}
70525419f0785a7cc184a4d7da1c956b
  $fShowWinningTeamStats_$cshowsPrec ::
    GHC.Types.Int -> Main.WinningTeamStats -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U),1*U(U),U(U),U,U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U),U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.WinningTeamStats) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.WinningTeamStats ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                 Main.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16 } }) -}
61fc3d55c4754e201b12715152b725b1
  $tc'WinningTeamStats :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   67155836878354579##
                   690362299980962075##
                   Main.$trModule
                   Main.$tc'WinningTeamStats1) -}
e25cca03a65475de12c11668f897c736
  $tc'WinningTeamStats1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WinningTeamStats"#) -}
b3e1bf103536455f0967c41ad741b144
  $tcWinningTeamStats :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12699744359944611637##
                   4646215249254202035##
                   Main.$trModule
                   Main.$tcWinningTeamStats1) -}
613656086af3c9a06ef2d23699acf57d
  $tcWinningTeamStats1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "WinningTeamStats"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
4fef43650c8e640d66e0e048a68f0d23
  $w$c< ::
    GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 28, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0] -}
5674f8cbfe45c59e2a441b8de1298448
  $w$c<= ::
    GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 28, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0] -}
87cb823fed0233c47d632ae709502cf9
  $w$c== ::
    GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 28, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Types.Bool)
                   (ww4 :: GHC.Types.Int)
                   (ww5 :: GHC.Types.Int)
                   (ww6 :: GHC.Types.Int)
                   (ww7 :: GHC.Types.Int)
                   (ww8 :: GHC.Types.Int)
                   (ww9 :: GHC.Types.Int)
                   (ww10 :: GHC.Types.Int)
                   (ww11 :: GHC.Types.Int)
                   (ww12 :: GHC.Types.Int)
                   (ww13 :: GHC.Types.Int)
                   (ww14 :: GHC.Prim.Int#)
                   (ww15 :: GHC.Types.Double)
                   (ww16 :: GHC.Types.Int)
                   (ww17 :: GHC.Types.Bool)
                   (ww18 :: GHC.Types.Int)
                   (ww19 :: GHC.Types.Int)
                   (ww20 :: GHC.Types.Int)
                   (ww21 :: GHC.Types.Int)
                   (ww22 :: GHC.Types.Int)
                   (ww23 :: GHC.Types.Int)
                   (ww24 :: GHC.Types.Int)
                   (ww25 :: GHC.Types.Int)
                   (ww26 :: GHC.Types.Int)
                   (ww27 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww14) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.D# x ->
                      case ww15 of wild2 { GHC.Types.D# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of wild4 { GHC.Types.I# x1 ->
                           case ww16 of wild5 { GHC.Types.I# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x1 y1) of wild6 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> let {
                                  $j :: GHC.Prim.Void# -> GHC.Types.Bool
                                    {- Arity: 1, Strictness: <L,A> -}
                                  = \ (w :: GHC.Prim.Void#)[OneShot] ->
                                    case ww5 of wild7 { GHC.Types.I# x2 ->
                                    case ww19 of wild8 { GHC.Types.I# y2 ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==# x2 y2) of wild9 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case ww6 of wild10 { GHC.Types.I# x3 ->
                                         case ww20 of wild11 { GHC.Types.I# y3 ->
                                         case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.==# x3 y3) of wild12 {
                                           GHC.Types.False -> GHC.Types.False
                                           GHC.Types.True
                                           -> case ww7 of wild13 { GHC.Types.I# x4 ->
                                              case ww21 of wild14 { GHC.Types.I# y4 ->
                                              case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.==# x4 y4) of wild15 {
                                                GHC.Types.False -> GHC.Types.False
                                                GHC.Types.True
                                                -> case ww8 of wild16 { GHC.Types.I# x5 ->
                                                   case ww22 of wild17 { GHC.Types.I# y5 ->
                                                   case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.==# x5 y5) of wild18 {
                                                     GHC.Types.False -> GHC.Types.False
                                                     GHC.Types.True
                                                     -> case ww9 of wild19 { GHC.Types.I# x6 ->
                                                        case ww23 of wild20 { GHC.Types.I# y6 ->
                                                        case GHC.Prim.tagToEnum#
                                                               @ GHC.Types.Bool
                                                               (GHC.Prim.==# x6 y6) of wild21 {
                                                          GHC.Types.False -> GHC.Types.False
                                                          GHC.Types.True
                                                          -> case ww10 of wild22 { GHC.Types.I# x7 ->
                                                             case ww24 of wild23 { GHC.Types.I# y7 ->
                                                             case GHC.Prim.tagToEnum#
                                                                    @ GHC.Types.Bool
                                                                    (GHC.Prim.==# x7 y7) of wild24 {
                                                               GHC.Types.False -> GHC.Types.False
                                                               GHC.Types.True
                                                               -> case ww11 of wild25 { GHC.Types.I# x8 ->
                                                                  case ww25 of wild26 { GHC.Types.I# y8 ->
                                                                  case GHC.Prim.tagToEnum#
                                                                         @ GHC.Types.Bool
                                                                         (GHC.Prim.==#
                                                                            x8
                                                                            y8) of wild27 {
                                                                    GHC.Types.False
                                                                    -> GHC.Types.False
                                                                    GHC.Types.True
                                                                    -> case ww12 of wild28 { GHC.Types.I# x9 ->
                                                                       case ww26 of wild29 { GHC.Types.I# y9 ->
                                                                       case GHC.Prim.tagToEnum#
                                                                              @ GHC.Types.Bool
                                                                              (GHC.Prim.==#
                                                                                 x9
                                                                                 y9) of wild30 {
                                                                         GHC.Types.False
                                                                         -> GHC.Types.False
                                                                         GHC.Types.True
                                                                         -> GHC.Classes.eqInt
                                                                              ww13
                                                                              ww27 } } } } } } } } } } } } } } } } } } } } } } } }
                                } in
                                case ww3 of wild7 {
                                  GHC.Types.False
                                  -> case ww17 of wild8 {
                                       GHC.Types.False
                                       -> case ww4 of wild9 { GHC.Types.I# x2 ->
                                          case ww18 of wild10 { GHC.Types.I# y2 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# x2 y2) of wild11 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True -> $j GHC.Prim.void# } } }
                                       GHC.Types.True -> GHC.Types.False }
                                  GHC.Types.True
                                  -> case ww17 of wild8 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case ww4 of wild9 { GHC.Types.I# x2 ->
                                          case ww18 of wild10 { GHC.Types.I# y2 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# x2 y2) of wild11 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> $j GHC.Prim.void# } } } } } } } } } } } }) -}
237be9989afe3dd733d547ec0e51efbb
  $w$c> ::
    GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 28, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0] -}
f0f065ed0cdcaff04383f9bff2369367
  $w$c>= ::
    GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 28, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0] -}
d2bc5e7ee49d42943a5364178568bea0
  $w$ccompare ::
    GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Ordering
  {- Arity: 28, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0] -}
66993f45558248c6c571b5af9f3fe879
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 15,
     Strictness: <S,U><L,U(U)><L,1*U(U)><L,U(U)><L,U><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)>,
     Inline: [0] -}
70525419f0785a7cc184a4d7da1c956b
  data WinningTeamStats
    = WinningTeamStats {pointDiff :: GHC.Types.Int,
                        fieldGoalPct :: GHC.Types.Double,
                        rebounds :: GHC.Types.Int,
                        home :: GHC.Types.Bool,
                        assists :: GHC.Types.Int,
                        steals :: GHC.Types.Int,
                        offReb :: GHC.Types.Int,
                        turnovers :: GHC.Types.Int,
                        threeFGA :: GHC.Types.Int,
                        threeFGM :: GHC.Types.Int,
                        freeTAtt :: GHC.Types.Int,
                        freeTMade :: GHC.Types.Int,
                        fouls :: GHC.Types.Int,
                        sFouls :: GHC.Types.Int}
3666110bff6ae6b24e42138acb76236c
  assists :: Main.WinningTeamStats -> GHC.Types.Int
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLL),1*U(A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds5 }) -}
107c9d38f5e1613771eb1e754a644065
  fieldGoalPct :: Main.WinningTeamStats -> GHC.Types.Double
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLL),1*U(A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds2 }) -}
53173e422e1feb632dde411709ed1e81
  fouls :: Main.WinningTeamStats -> GHC.Types.Int
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds13 }) -}
c813abdd02e1e0fe7dc56fab618fc079
  freeTAtt :: Main.WinningTeamStats -> GHC.Types.Int
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds11 }) -}
28f3f6f643273a1f7a63eca09ec30f15
  freeTMade :: Main.WinningTeamStats -> GHC.Types.Int
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds12 }) -}
47bb4bf404d79cc045aed1e816c2252a
  home :: Main.WinningTeamStats -> GHC.Types.Bool
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds4 }) -}
406b6886b7a762bdf5e0a8478190e3b8
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
5cad431df9808dcfd29a43d67ca8527c
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Encoding.getForeignEncoding1 of wild { (,) getForeignEncoding5 setForeignEncoding1 ->
                 case getForeignEncoding5
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.Base.Maybe GHC.Base.String)
                        ipv1
                        Main.main5
                        System.Environment.getEnv4
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild1 {
                   GHC.Base.Nothing
                   -> case GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ GHC.Base.String
                             Main.main2
                             ipv2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   GHC.Base.Just x
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        x
                        GHC.Types.True
                        ipv2 } } } }) -}
e512c5022c767ee9694f4d861bfd0daa
  main2 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionIOException_$ctoException
                   Main.main3) -}
ecb94806b7a84491536ad818c97e0702
  main3 :: GHC.IO.Exception.IOException
  {- Unfolding: (GHC.IO.Exception.IOError
                   (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
                   GHC.IO.Exception.NoSuchThing
                   System.Environment.getEnv3
                   System.Environment.getEnv2
                   (GHC.Base.Nothing @ Foreign.C.Types.CInt)
                   Main.main4) -}
61aa20d20d111f59b1fb36da5313db85
  main4 :: GHC.Base.Maybe GHC.Base.String
  {- Unfolding: (GHC.Base.Just @ GHC.Base.String Main.main5) -}
b23ec00c50c33493dd6ff0e147de379d
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NBA_API_KEY"#) -}
f3b4f7fcee9b1e1656d6edc92cae3b39
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
7c906152ab413e88634f2400dc3b60ff
  offReb :: Main.WinningTeamStats -> GHC.Types.Int
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds7 }) -}
291acfe4a14ad2f9cff2e697b2c2156d
  pointDiff :: Main.WinningTeamStats -> GHC.Types.Int
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLL),1*U(1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds1 }) -}
2077cff57bd98ae4f1f10c3e6c361819
  rebounds :: Main.WinningTeamStats -> GHC.Types.Int
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLL),1*U(A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds3 }) -}
b253514ae6d70167295c1f3e3c6e5ce3
  sFouls :: Main.WinningTeamStats -> GHC.Types.Int
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds14 }) -}
b9091a874ac162ce73c57bc78a8f6a2e
  steals :: Main.WinningTeamStats -> GHC.Types.Int
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLL),1*U(A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds6 }) -}
ea70df047abd7d4f597d2ed5c0828c09
  threeFGA :: Main.WinningTeamStats -> GHC.Types.Int
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds9 }) -}
309d780d6703c176f73f4476cddf7856
  threeFGM :: Main.WinningTeamStats -> GHC.Types.Int
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds10 }) -}
600346bf63146dd868e8ec86f17ffa1e
  turnovers :: Main.WinningTeamStats -> GHC.Types.Int
  RecSel Left Main.WinningTeamStats
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.WinningTeamStats) ->
                 case ds of wild { Main.WinningTeamStats ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds8 }) -}
instance [safe] GHC.Classes.Eq [Main.WinningTeamStats]
  = Main.$fEqWinningTeamStats
instance [safe] GHC.Classes.Ord [Main.WinningTeamStats]
  = Main.$fOrdWinningTeamStats
instance [safe] GHC.Show.Show [Main.WinningTeamStats]
  = Main.$fShowWinningTeamStats
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

